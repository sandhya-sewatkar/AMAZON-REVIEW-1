
● Question 1: What is Pandas, and why is it commonly used in data cleaning tasks?

ANS:- Pandas is a powerful Python library for data manipulation and analysis, widely used in data cleaning tasks due to its comprehensive functionality 
      for handling missing values, duplicates, data type inconsistencies, and other data quality issues.

● Question 2: Given a DataFrame with missing values, how would you check for missing values in each column and count the total number of missing values?

ANS:- To check for missing values in each column,we use df.isnull().sum(). To count the total number of missing values, use df.isnull().sum().sum().

● Question 3: How can you remove duplicates from a DataFrame while retaining the first occurrence of each unique row?

ANS:- To remove duplicates while retaining the first occurrence,we use df.drop_duplicates.

● Question 4: If you have a DataFrame with a column containing string values, how can you convert all the values in that column to lowercase?

ANS:- str.lower() method applied to the string column to convert all values to lowercase.
      To convert all values in a column to lowercase,we use df['column_name'] = df['column_name'].str.lower().

● Question 5: How do you replace missing values in a DataFrame with a specific value,like 0, for a particular column?

ANS:- To replace missing values with a specific value (e.g., 0), we use df['column_name'].fillna(0, inplace=True).


● Question 6: If you have a DataFrame with a datetime column, how can you extract the year, month, and day into separate columns?

ANS:- To extract year, month, and day from a datetime column, we use df['year'] = df['datetime_column'].dt.year, and similarly for month and day.


● Question 7: How can you filter rows in a DataFrame where a specific column's values meet a certain condition (e.g., all rows where 'age' is greater than 30)?

ANS:- To filter rows based on a condition (e.g., age > 30),we use df_filtered = df[df['age'] > 30].

● Question 8: What is the purpose of the .apply() function in Pandas, and how would you use it to create a new column based on values from existing columns?

ANS:- The .apply() function is used to apply a function along the axis of a DataFrame. To create a new column, use df['new_column'] = df.apply(lambda row: your_function(row), axis=1).

● Question 9: Suppose you want to merge two DataFrames, 'df1' and 'df2,' on a common column 'key.' How would you perform this merge operation in Pandas?

ANS:- To merge two DataFrames, 'df1' and 'df2,' on a common column 'key,' use merged_df = pd.merge(df1, df2, on='key').


● Question 10: You have a DataFrame with a column containing messy text data. How can you clean and standardize the text data (e.g., remove punctuation and convert to lowercase) in that column?

ANS:- To clean and standardize text data in a column, use df['text_column'] = df['text_column'].str.replace('[^\w\s]', '').str.lower().

